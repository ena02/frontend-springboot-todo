{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar core_1 = require(\"@angular/core\");\n\nvar common_1 = require(\"@angular/common\"); // Based on https://github.com/angular/material2/tree/master/src/lib/sidenav\n\n\nvar SidebarContainer =\n/** @class */\nfunction () {\n  function SidebarContainer(_ref, platformId) {\n    this._ref = _ref;\n    this.animate = true;\n    this.allowSidebarBackdropControl = true;\n    this.showBackdrop = false;\n    this.showBackdropChange = new core_1.EventEmitter();\n    this.onBackdropClicked = new core_1.EventEmitter();\n    this._sidebars = [];\n    this._isBrowser = common_1.isPlatformBrowser(platformId);\n  }\n\n  SidebarContainer.prototype.ngAfterContentInit = function () {\n    if (!this._isBrowser) {\n      return;\n    }\n\n    this._onToggle();\n  };\n\n  SidebarContainer.prototype.ngOnChanges = function (changes) {\n    if (!this._isBrowser) {\n      return;\n    }\n\n    if (changes['showBackdrop']) {\n      this.showBackdropChange.emit(changes['showBackdrop'].currentValue);\n    }\n  };\n\n  SidebarContainer.prototype.ngOnDestroy = function () {\n    if (!this._isBrowser) {\n      return;\n    }\n\n    this._unsubscribe();\n  };\n  /**\n   * @internal\n   *\n   * Adds a sidebar to the container's list of sidebars.\n   *\n   * @param sidebar {Sidebar} A sidebar within the container to register.\n   */\n\n\n  SidebarContainer.prototype._addSidebar = function (sidebar) {\n    this._sidebars.push(sidebar);\n\n    this._subscribe(sidebar);\n  };\n  /**\n   * @internal\n   *\n   * Removes a sidebar from the container's list of sidebars.\n   *\n   * @param sidebar {Sidebar} The sidebar to remove.\n   */\n\n\n  SidebarContainer.prototype._removeSidebar = function (sidebar) {\n    var index = this._sidebars.indexOf(sidebar);\n\n    if (index !== -1) {\n      this._sidebars.splice(index, 1);\n    }\n  };\n  /**\n   * @internal\n   *\n   * Computes `margin` value to push page contents to accommodate open sidebars as needed.\n   *\n   * @return {CSSStyleDeclaration} margin styles for the page content.\n   */\n\n\n  SidebarContainer.prototype._getContentStyle = function () {\n    var left = 0,\n        right = 0,\n        top = 0,\n        bottom = 0;\n    var transformStyle = '';\n    var heightStyle = '';\n    var widthStyle = '';\n\n    for (var _i = 0, _a = this._sidebars; _i < _a.length; _i++) {\n      var sidebar = _a[_i]; // Slide mode: we need to translate the entire container\n\n      if (sidebar._isModeSlide) {\n        if (sidebar.opened) {\n          var transformDir = sidebar._isLeftOrRight ? 'X' : 'Y';\n          var transformAmt = \"\" + (sidebar._isLeftOrTop ? '' : '-') + (sidebar._isLeftOrRight ? sidebar._width : sidebar._height);\n          transformStyle = \"translate\" + transformDir + \"(\" + transformAmt + \"px)\";\n        }\n      } // Create a space for the sidebar\n\n\n      if (sidebar._isModePush && sidebar.opened || sidebar.dock) {\n        var paddingAmt = 0;\n\n        if (sidebar._isModeSlide && sidebar.opened) {\n          if (sidebar._isLeftOrRight) {\n            widthStyle = '100%';\n          } else {\n            heightStyle = '100%';\n          }\n        } else {\n          if (sidebar._isDocked || sidebar._isModeOver && sidebar.dock) {\n            paddingAmt = sidebar._dockedSize;\n          } else {\n            paddingAmt = sidebar._isLeftOrRight ? sidebar._width : sidebar._height;\n          }\n        }\n\n        switch (sidebar.position) {\n          case 'left':\n            left = Math.max(left, paddingAmt);\n            break;\n\n          case 'right':\n            right = Math.max(right, paddingAmt);\n            break;\n\n          case 'top':\n            top = Math.max(top, paddingAmt);\n            break;\n\n          case 'bottom':\n            bottom = Math.max(bottom, paddingAmt);\n            break;\n        }\n      }\n    }\n\n    return {\n      padding: top + \"px \" + right + \"px \" + bottom + \"px \" + left + \"px\",\n      webkitTransform: transformStyle,\n      transform: transformStyle,\n      height: heightStyle,\n      width: widthStyle\n    };\n  };\n  /**\n   * @internal\n   *\n   * Closes sidebars when the backdrop is clicked, if they have the\n   * `closeOnClickBackdrop` option set.\n   */\n\n\n  SidebarContainer.prototype._onBackdropClicked = function () {\n    var backdropClicked = false;\n\n    for (var _i = 0, _a = this._sidebars; _i < _a.length; _i++) {\n      var sidebar = _a[_i];\n\n      if (sidebar.opened && sidebar.showBackdrop && sidebar.closeOnClickBackdrop) {\n        sidebar.close();\n        backdropClicked = true;\n      }\n    }\n\n    if (backdropClicked) {\n      this.onBackdropClicked.emit();\n    }\n  };\n  /**\n   * Subscribes from a sidebar events to react properly.\n   */\n\n\n  SidebarContainer.prototype._subscribe = function (sidebar) {\n    var _this = this;\n\n    sidebar.onOpenStart.subscribe(function () {\n      return _this._onToggle();\n    });\n    sidebar.onOpened.subscribe(function () {\n      return _this._markForCheck();\n    });\n    sidebar.onCloseStart.subscribe(function () {\n      return _this._onToggle();\n    });\n    sidebar.onClosed.subscribe(function () {\n      return _this._markForCheck();\n    });\n    sidebar.onModeChange.subscribe(function () {\n      return _this._markForCheck();\n    });\n    sidebar.onPositionChange.subscribe(function () {\n      return _this._markForCheck();\n    });\n\n    sidebar._onRerender.subscribe(function () {\n      return _this._markForCheck();\n    });\n  };\n  /**\n   * Unsubscribes from all sidebars.\n   */\n\n\n  SidebarContainer.prototype._unsubscribe = function () {\n    for (var _i = 0, _a = this._sidebars; _i < _a.length; _i++) {\n      var sidebar = _a[_i];\n      sidebar.onOpenStart.unsubscribe();\n      sidebar.onOpened.unsubscribe();\n      sidebar.onCloseStart.unsubscribe();\n      sidebar.onClosed.unsubscribe();\n      sidebar.onModeChange.unsubscribe();\n      sidebar.onPositionChange.unsubscribe();\n\n      sidebar._onRerender.unsubscribe();\n    }\n  };\n  /**\n   * Check if we should show the backdrop when a sidebar is toggled.\n   */\n\n\n  SidebarContainer.prototype._onToggle = function () {\n    var _this = this;\n\n    if (this._sidebars.length > 0 && this.allowSidebarBackdropControl) {\n      // Show backdrop if a single open sidebar has it set\n      var hasOpen = this._sidebars.some(function (sidebar) {\n        return sidebar.opened && sidebar.showBackdrop;\n      });\n\n      this.showBackdrop = hasOpen;\n      this.showBackdropChange.emit(hasOpen);\n    }\n\n    setTimeout(function () {\n      _this._markForCheck();\n    });\n  };\n  /**\n   * Triggers change detection to recompute styles.\n   */\n\n\n  SidebarContainer.prototype._markForCheck = function () {\n    this._ref.markForCheck();\n  };\n\n  __decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], SidebarContainer.prototype, \"animate\", void 0);\n\n  __decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], SidebarContainer.prototype, \"allowSidebarBackdropControl\", void 0);\n\n  __decorate([core_1.Input(), __metadata(\"design:type\", Boolean)], SidebarContainer.prototype, \"showBackdrop\", void 0);\n\n  __decorate([core_1.Output(), __metadata(\"design:type\", Object)], SidebarContainer.prototype, \"showBackdropChange\", void 0);\n\n  __decorate([core_1.Output(), __metadata(\"design:type\", Object)], SidebarContainer.prototype, \"onBackdropClicked\", void 0);\n\n  __decorate([core_1.Input(), __metadata(\"design:type\", String)], SidebarContainer.prototype, \"contentClass\", void 0);\n\n  __decorate([core_1.Input(), __metadata(\"design:type\", String)], SidebarContainer.prototype, \"backdropClass\", void 0);\n\n  SidebarContainer = __decorate([core_1.Component({\n    selector: 'ng-sidebar-container',\n    template: \"\\n    <div *ngIf=\\\"showBackdrop\\\"\\n      aria-hidden=\\\"true\\\"\\n      class=\\\"ng-sidebar__backdrop\\\"\\n      [ngClass]=\\\"backdropClass\\\"\\n      (click)=\\\"_onBackdropClicked()\\\"></div>\\n\\n    <ng-content select=\\\"ng-sidebar,[ng-sidebar]\\\"></ng-content>\\n\\n    <div class=\\\"ng-sidebar__content\\\"\\n      [class.ng-sidebar__content--animate]=\\\"animate\\\"\\n      [ngClass]=\\\"contentClass\\\"\\n      [ngStyle]=\\\"_getContentStyle()\\\">\\n      <ng-content select=\\\"[ng-sidebar-content]\\\"></ng-content>\\n    </div>\\n  \",\n    styles: [\"\\n    :host {\\n      box-sizing: border-box;\\n      display: block;\\n      position: relative;\\n      height: 100%;\\n      width: 100%;\\n      overflow: hidden;\\n    }\\n\\n    .ng-sidebar__backdrop {\\n      position: absolute;\\n      top: 0;\\n      bottom: 0;\\n      left: 0;\\n      right: 0;\\n      background: #000;\\n      opacity: 0.75;\\n      pointer-events: auto;\\n      z-index: 1;\\n    }\\n\\n    .ng-sidebar__content {\\n      -webkit-overflow-scrolling: touch;\\n      overflow: auto;\\n      position: absolute;\\n      top: 0;\\n      bottom: 0;\\n      left: 0;\\n      right: 0;\\n    }\\n\\n    .ng-sidebar__content--animate {\\n      -webkit-transition: -webkit-transform 0.3s cubic-bezier(0, 0, 0.3, 1), padding 0.3s cubic-bezier(0, 0, 0.3, 1);\\n      transition: transform 0.3s cubic-bezier(0, 0, 0.3, 1), padding 0.3s cubic-bezier(0, 0, 0.3, 1);\\n    }\\n  \"],\n    changeDetection: core_1.ChangeDetectionStrategy.OnPush\n  }), __param(1, core_1.Inject(core_1.PLATFORM_ID)), __metadata(\"design:paramtypes\", [core_1.ChangeDetectorRef, Object])], SidebarContainer);\n  return SidebarContainer;\n}();\n\nexports.SidebarContainer = SidebarContainer;","map":null,"metadata":{},"sourceType":"script"}