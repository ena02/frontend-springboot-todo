{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { zip } from \"rxjs\";\nimport { concatMap, map } from \"rxjs/operators\";\nlet AppComponent = // компонент-контейнер (Smart, Container), который управляет другими  компонентами (Dumb, Presentational)\nclass AppComponent {\n  constructor(dataHandler, // фасад для работы с данными\n  introService, // вводная справоч. информация с выделением областей\n  deviceService // для определения типа устройства (моб., десктоп, планшет)\n  ) {\n    this.dataHandler = dataHandler;\n    this.introService = introService;\n    this.deviceService = deviceService; // коллекция категорий с кол-вом незавершенных задач для каждой из них\n\n    this.categoryMap = new Map(); // показать/скрыть статистику\n\n    this.showStat = true; // выбранная категория\n\n    this.selectedCategory = null; // null - значит будет выбрана категория \"Все\"\n    // поиск\n\n    this.searchTaskText = ''; // текущее значение для поиска задач\n\n    this.searchCategoryText = ''; // текущее значение для поиска категорий\n    // определяем тип запроса\n\n    this.isMobile = deviceService.isMobile();\n    this.isTablet = deviceService.isTablet();\n    this.showStat = true ? !this.isMobile : false; // если моб. устройство, то по-умолчанию не показывать статистику\n\n    this.setMenuValues(); // установить настройки меню\n  }\n\n  ngOnInit() {\n    this.dataHandler.getAllPriorities().subscribe(priorities => this.priorities = priorities);\n    this.dataHandler.getAllCategories().subscribe(categories => this.categories = categories); // заполнить меню с категориями\n\n    this.fillCategories(); // по-умолчанию показать все задачи (будет выбрана категория Все)\n\n    this.onSelectCategory(null); // для мобильных и планшетов - не показывать интро\n\n    if (!this.isMobile && !this.isTablet) {\n      // пробуем показать приветственные справочные материалы\n      this.introService.startIntroJS(true);\n    }\n  } // добавление категории\n\n\n  onAddCategory(title) {\n    this.dataHandler.addCategory(title).subscribe(categories => {\n      this.onSearchCategory(this.searchCategoryText);\n      this.fillCategories();\n    });\n  } // заполняет категории и кол-во невыполненных задач по каждой из них (нужно для отображения категорий)\n\n\n  fillCategories() {\n    if (this.categoryMap) {\n      this.categoryMap.clear();\n    }\n\n    this.categories = this.categories.sort((a, b) => a.title.localeCompare(b.title)); // для каждой категории посчитать кол-во невыполненных задач\n\n    this.categories.forEach(cat => {\n      this.dataHandler.getUncompletedCountInCategory(cat).subscribe(count => this.categoryMap.set(cat, count));\n    });\n  } // поиск категории\n\n\n  onSearchCategory(title) {\n    this.searchCategoryText = title;\n    this.dataHandler.searchCategories(title).subscribe(categories => {\n      this.categories = categories;\n      this.fillCategories();\n    });\n  } // изменение категории\n\n\n  onSelectCategory(category) {\n    this.selectedCategory = category;\n    this.updateTasksAndStat();\n\n    if (this.isMobile) {\n      this.menuOpened = false; // закрываем боковое меню\n    }\n  } // удаление категории\n\n\n  onDeleteCategory(category) {\n    this.dataHandler.deleteCategory(category.id).subscribe(cat => {\n      this.selectedCategory = null; // открываем категорию \"Все\"\n\n      this.categoryMap.delete(cat); // не забыть удалить категорию из карты\n\n      this.onSearchCategory(this.searchCategoryText);\n      this.updateTasks();\n    });\n  } // обновлении категории\n\n\n  onUpdateCategory(category) {\n    this.dataHandler.updateCategory(category).subscribe(() => {\n      this.onSearchCategory(this.searchCategoryText);\n    });\n  } // обновление задачи\n\n\n  onUpdateTask(task) {\n    this.dataHandler.updateTask(task).subscribe(() => {\n      this.fillCategories();\n      this.updateTasksAndStat();\n    });\n  } // удаление задачи\n\n\n  onDeleteTask(task) {\n    this.dataHandler.deleteTask(task.id).pipe(concatMap(task => {\n      return this.dataHandler.getUncompletedCountInCategory(task.category).pipe(map(count => {\n        return {\n          t: task,\n          count\n        };\n      }));\n    })).subscribe(result => {\n      const t = result.t; // чтобы не обновлять весь список - обновим точечно\n\n      if (t.category) {\n        this.categoryMap.set(t.category, result.count);\n      }\n\n      this.updateTasksAndStat();\n    });\n  } // поиск задач\n\n\n  onSearchTasks(searchString) {\n    this.searchTaskText = searchString;\n    this.updateTasks();\n  } // фильтрация задач по статусу (все, решенные, нерешенные)\n\n\n  onFilterTasksByStatus(status) {\n    this.statusFilter = status;\n    this.updateTasks();\n  } // фильтрация задач по приоритету\n\n\n  onFilterTasksByPriority(priority) {\n    this.priorityFilter = priority;\n    this.updateTasks();\n  } // обновить список задач\n\n\n  updateTasks() {\n    this.dataHandler.searchTasks(this.selectedCategory, this.searchTaskText, this.statusFilter, this.priorityFilter).subscribe(tasks => {\n      this.tasks = tasks;\n    });\n  } // добавление задачи\n\n\n  onAddTask(task) {\n    this.dataHandler.addTask(task).pipe( // сначала добавляем задачу\n    concatMap(task => {\n      // .. и считаем кол-во задач в категории с учетом добавленной задачи\n      return this.dataHandler.getUncompletedCountInCategory(task.category).pipe(map(count => {\n        return {\n          t: task,\n          count\n        }; // в итоге получаем массив с добавленной задачей и кол-вом задач для категории\n      }));\n    })).subscribe(result => {\n      const t = result.t; // если указана категория - обновляем счетчик для соотв. категории\n      // чтобы не обновлять весь список - обновим точечно\n\n      if (t.category) {\n        this.categoryMap.set(t.category, result.count);\n      }\n\n      this.updateTasksAndStat();\n    });\n  } // показывает задачи с применением всех текущий условий (категория, поиск, фильтры и пр.)\n\n\n  updateTasksAndStat() {\n    this.updateTasks(); // обновить список задач\n    // обновить переменные для статистики\n\n    this.updateStat();\n  } // обновить статистику\n\n\n  updateStat() {\n    zip(this.dataHandler.getTotalCountInCategory(this.selectedCategory), this.dataHandler.getCompletedCountInCategory(this.selectedCategory), this.dataHandler.getUncompletedCountInCategory(this.selectedCategory), this.dataHandler.getUncompletedTotalCount()).subscribe(array => {\n      this.totalTasksCountInCategory = array[0];\n      this.completedCountInCategory = array[1];\n      this.uncompletedCountInCategory = array[2];\n      this.uncompletedTotalTasksCount = array[3]; // нужно для категории Все\n    });\n  } // показать-скрыть статистику\n\n\n  toggleStat(showStat) {\n    this.showStat = showStat;\n  } // если закрыли меню любым способом - ставим значение false\n\n\n  onClosedMenu() {\n    this.menuOpened = false;\n  } // параметры меню\n\n\n  setMenuValues() {\n    this.menuPosition = 'left'; // меню слева\n    // настройки бокового меню для моб. и десктоп вариантов\n\n    if (this.isMobile) {\n      this.menuOpened = false; // на моб. версии по-умолчанию меню будет закрыто\n\n      this.menuMode = 'over'; // поверх всего контента\n\n      this.showBackdrop = true; // показывать темный фон или нет (нужно для мобильной версии)\n    } else {\n      this.menuOpened = true; // НЕ в моб. версии  по-умолчанию меню будет открыто (т.к. хватает места)\n\n      this.menuMode = 'push'; // будет \"толкать\" основной контент, а не закрывать его\n\n      this.showBackdrop = false; // показывать темный фон или нет\n    }\n  } // показать-скрыть меню\n\n\n  toggleMenu() {\n    this.menuOpened = !this.menuOpened;\n  }\n\n};\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  templateUrl: 'app.component.html',\n  styles: []\n}) // компонент-контейнер (Smart, Container), который управляет другими  компонентами (Dumb, Presentational)\n], AppComponent);\nexport { AppComponent };","map":null,"metadata":{},"sourceType":"module"}