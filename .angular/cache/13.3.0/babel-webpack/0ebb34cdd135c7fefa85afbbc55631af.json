{"ast":null,"code":"import { __decorate, __param } from \"tslib\";\nimport { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { ConfirmDialogComponent } from '../confirm-dialog/confirm-dialog.component';\nimport { OperType } from \"../OperType\";\nlet EditTaskDialogComponent = // редактирование/создание задачи\nclass EditTaskDialogComponent {\n  constructor(dialogRef, // // для возможности работы с текущим диалог. окном\n  data, // данные, которые передали в диалоговое окно\n  dataHandler, // ссылка на сервис для работы с данными\n  dialog, // для открытия нового диалогового окна (из текущего) - например для подтверждения удаления\n  deviceService // для определения типа устройства\n  ) {\n    this.dialogRef = dialogRef;\n    this.data = data;\n    this.dataHandler = dataHandler;\n    this.dialog = dialog;\n    this.deviceService = deviceService;\n    this.isMobile = deviceService.isMobile();\n  }\n\n  ngOnInit() {\n    this.task = this.data[0]; // задача для редактирования/создания\n\n    this.dialogTitle = this.data[1]; // текст для диалогового окна\n\n    this.operType = this.data[2]; // тип операции\n    // инициализация начальных значений (записывам в отдельные переменные\n    // чтобы можно было отменить изменения, а то будут сразу записываться в задачу)\n\n    this.tmpTitle = this.task.title;\n    this.tmpPriority = this.task.priority;\n    this.tmpCategory = this.task.category;\n    this.tmpDate = this.task.date;\n    this.dataHandler.getAllCategories().subscribe(items => this.categories = items);\n    this.dataHandler.getAllPriorities().subscribe(items => this.priorities = items);\n  } // нажали ОК\n\n\n  onConfirm() {\n    // считываем все значения для сохранения в поля задачи\n    this.task.title = this.tmpTitle;\n    this.task.priority = this.tmpPriority;\n    this.task.category = this.tmpCategory;\n    this.task.date = this.tmpDate; // передаем добавленную/измененную задачу в обработчик\n    // что с ним будут делать - уже на задача этого компонента\n\n    this.dialogRef.close(this.task);\n  } // нажали отмену (ничего не сохраняем и закрываем окно)\n\n\n  onCancel() {\n    this.dialogRef.close(null);\n  } // нажали Удалить\n\n\n  delete() {\n    const dialogRef = this.dialog.open(ConfirmDialogComponent, {\n      maxWidth: '500px',\n      data: {\n        dialogTitle: 'Подтвердите действие',\n        message: `Вы действительно хотите удалить задачу: \"${this.task.title}\"?`\n      },\n      autoFocus: false\n    });\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this.dialogRef.close('delete'); // нажали удалить\n      }\n    });\n  } // нажали Выполнить (завершить) задачу\n\n\n  complete() {\n    this.dialogRef.close('complete');\n  } // делаем статус задачи \"незавершенным\" (активируем)\n\n\n  activate() {\n    this.dialogRef.close('activate');\n  } // можно ли удалять (для показа/скрытия кнопки)\n\n\n  canDelete() {\n    return this.operType === OperType.EDIT;\n  } // можно ли активировать/завершить задачу (для показа/скрытия кнопки)\n\n\n  canActivateDesactivate() {\n    return this.operType === OperType.EDIT;\n  }\n\n};\nEditTaskDialogComponent = __decorate([Component({\n  selector: 'app-edit-task-dialog',\n  templateUrl: './edit-task-dialog.component.html',\n  styleUrls: ['./edit-task-dialog.component.css']\n}) // редактирование/создание задачи\n, __param(1, Inject(MAT_DIALOG_DATA))], EditTaskDialogComponent);\nexport { EditTaskDialogComponent };","map":null,"metadata":{},"sourceType":"module"}