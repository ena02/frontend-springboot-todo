{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { Task } from 'src/app/model/Task';\nimport { MatTableDataSource } from \"@angular/material/table\";\nimport { MatPaginator } from \"@angular/material/paginator\";\nimport { MatSort } from \"@angular/material/sort\";\nimport { EditTaskDialogComponent } from \"../../dialog/edit-task-dialog/edit-task-dialog.component\";\nimport { ConfirmDialogComponent } from \"../../dialog/confirm-dialog/confirm-dialog.component\";\nimport { OperType } from \"../../dialog/OperType\";\nlet TasksComponent = class TasksComponent {\n  constructor(dataHandler, // доступ к данным\n  dialog, // работа с диалоговыми окнами (показать, закрыть)\n  deviceService // для определения типа устройства\n  ) {\n    this.dataHandler = dataHandler;\n    this.dialog = dialog;\n    this.deviceService = deviceService;\n    this.deleteTask = new EventEmitter(); // удаление задачи\n\n    this.updateTask = new EventEmitter(); // обновление задачи\n\n    this.selectCategory = new EventEmitter(); // нажали на категорию из списка задач\n\n    this.filterByTitle = new EventEmitter(); // поиск задач по названию\n\n    this.filterByStatus = new EventEmitter(); // фильтрация задач по статусу\n\n    this.filterByPriority = new EventEmitter(); // фильтрация задач по приоритету\n\n    this.addTask = new EventEmitter(); // добавление новой задачи\n\n    this.selectedStatusFilter = null; // по-умолчанию будут показываться задачи по всем статусам (решенные и нерешенные)\n\n    this.selectedPriorityFilter = null; // по-умолчанию будут показываться задачи по всем приоритетам\n    // поля для таблицы (те, что отображают данные из задачи - должны совпадать с названиями переменных класса)\n\n    this.displayedColumns = ['color', 'id', 'title', 'date', 'priority', 'category', 'operations', 'select'];\n    this.isMobile = this.deviceService.isMobile();\n  } // текущие задачи для отображения на странице\n\n\n  set setTasks(tasks) {\n    this.tasks = tasks;\n    this.fillTable();\n  } // все приоритеты (для фильтрации)\n\n\n  set setPriorities(priorities) {\n    this.priorities = priorities;\n  }\n\n  ngOnInit() {\n    // датасорс обязательно нужно создавать для таблицы, в него присваивается любой источник (БД, массивы, JSON и пр.)\n    this.dataSource = new MatTableDataSource();\n    this.onSelectCategory(null); // по-умолчанию показываем категорию \"Все\"\n  } // в зависимости от статуса задачи - вернуть цвет названия\n\n\n  getPriorityColor(task) {\n    // цвет завершенной задачи\n    if (task.completed) {\n      return '#F8F9FA'; // TODO вынести цвета в константы (magic strings, magic numbers)\n    }\n\n    if (task.priority && task.priority.color) {\n      return task.priority.color;\n    }\n\n    return '#fff'; // TODO вынести цвета в константы (magic strings, magic numbers)\n  } // показывает задачи с применением всех текущий условий (категория, поиск, фильтры и пр.)\n\n\n  fillTable() {\n    if (!this.dataSource) {\n      return;\n    }\n\n    this.dataSource.data = this.tasks; // обновить источник данных (т.к. данные массива tasks обновились)\n\n    this.addTableObjects(); // применить постраничность и сортировку для новых данных\n    // когда получаем новые данные..\n    // чтобы можно было сортировать по столбцам \"категория\" и \"приоритет\", т.к. там не примитивные типы, а объекты\n    // @ts-ignore - показывает ошибку для типа даты, но так работает, т.к. можно возвращать любой тип\n\n    this.dataSource.sortingDataAccessor = (task, colName) => {\n      // по каким полям выполнять сортировку для каждого столбца\n      switch (colName) {\n        case 'priority':\n          {\n            return task.priority ? task.priority.id : null;\n          }\n\n        case 'category':\n          {\n            return task.category ? task.category.title : null;\n          }\n\n        case 'date':\n          {\n            return task.date ? task.date : null;\n          }\n\n        case 'title':\n          {\n            return task.title;\n          }\n      }\n    };\n  }\n\n  addTableObjects() {\n    this.dataSource.sort = this.sort; // компонент для сортировки данных (если необходимо)\n\n    this.dataSource.paginator = this.paginator; // обновить компонент постраничности (кол-во записей, страниц)\n  } // диалоговое редактирования для добавления задачи\n\n\n  openEditTaskDialog(task) {\n    // открытие диалогового окна\n    const dialogRef = this.dialog.open(EditTaskDialogComponent, {\n      data: [task, 'Редактирование задачи', OperType.EDIT],\n      autoFocus: false\n    });\n    dialogRef.afterClosed().subscribe(result => {\n      // обработка результатов\n      if (result === 'complete') {\n        task.completed = true; // ставим статус задачи как выполненная\n\n        this.updateTask.emit(task);\n      }\n\n      if (result === 'activate') {\n        task.completed = false; // возвращаем статус задачи как невыполненная\n\n        this.updateTask.emit(task);\n        return;\n      }\n\n      if (result === 'delete') {\n        this.deleteTask.emit(task);\n        return;\n      }\n\n      if (result) {\n        // если нажали ОК и есть результат\n        this.updateTask.emit(task);\n        return;\n      }\n    });\n  } // диалоговое окно подтверждения удаления\n\n\n  openDeleteDialog(task) {\n    const dialogRef = this.dialog.open(ConfirmDialogComponent, {\n      maxWidth: '500px',\n      data: {\n        dialogTitle: 'Подтвердите действие',\n        message: `Вы действительно хотите удалить задачу: \"${task.title}\"?`\n      },\n      autoFocus: false\n    });\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        // если нажали ОК\n        this.deleteTask.emit(task);\n      }\n    });\n  } // изменить статус задачи\n\n\n  onToggleStatus(task) {\n    task.completed = !task.completed;\n    this.updateTask.emit(task);\n  } // выбрали другую категорию\n\n\n  onSelectCategory(category) {\n    this.selectCategory.emit(category);\n  } // фильтрация по названию\n\n\n  onFilterByTitle() {\n    this.filterByTitle.emit(this.searchTaskText);\n  } // фильтрация по статусу\n\n\n  onFilterByStatus(value) {\n    // на всякий случай проверяем изменилось ли значение (хотя сам UI компонент должен это делать)\n    if (value !== this.selectedStatusFilter) {\n      this.selectedStatusFilter = value;\n      this.filterByStatus.emit(this.selectedStatusFilter);\n    }\n  } // фильтрация по приоритету\n\n\n  onFilterByPriority(value) {\n    // на всякий случай проверяем изменилось ли значение (хотя сам UI компонент должен это делать)\n    if (value !== this.selectedPriorityFilter) {\n      this.selectedPriorityFilter = value;\n      this.filterByPriority.emit(this.selectedPriorityFilter);\n    }\n  } // диалоговое окно для добавления задачи\n\n\n  openAddTaskDialog() {\n    // то же самое, что и при редактировании, но только передаем пустой объект Task\n    const task = new Task(null, '', false, null, this.selectedCategory);\n    const dialogRef = this.dialog.open(EditTaskDialogComponent, {\n      data: [task, 'Добавление задачи', OperType.ADD]\n    });\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        // если нажали ОК и есть результат\n        this.addTask.emit(task);\n      }\n    });\n  } // в зависимости от статуса задачи - вернуть фоноввый цвет\n\n\n  getMobilePriorityBgColor(task) {\n    if (task.priority != null && !task.completed) {\n      return task.priority.color;\n    }\n\n    return 'none';\n  }\n\n};\n\n__decorate([Output()], TasksComponent.prototype, \"deleteTask\", void 0);\n\n__decorate([Output()], TasksComponent.prototype, \"updateTask\", void 0);\n\n__decorate([Output()], TasksComponent.prototype, \"selectCategory\", void 0);\n\n__decorate([Output()], TasksComponent.prototype, \"filterByTitle\", void 0);\n\n__decorate([Output()], TasksComponent.prototype, \"filterByStatus\", void 0);\n\n__decorate([Output()], TasksComponent.prototype, \"filterByPriority\", void 0);\n\n__decorate([Output()], TasksComponent.prototype, \"addTask\", void 0);\n\n__decorate([Input()], TasksComponent.prototype, \"selectedCategory\", void 0);\n\n__decorate([ViewChild(MatSort)], TasksComponent.prototype, \"sort\", void 0);\n\n__decorate([ViewChild(MatPaginator)], TasksComponent.prototype, \"paginator\", void 0);\n\n__decorate([Input('tasks')], TasksComponent.prototype, \"setTasks\", null);\n\n__decorate([Input('priorities')], TasksComponent.prototype, \"setPriorities\", null);\n\nTasksComponent = __decorate([Component({\n  selector: 'app-tasks',\n  templateUrl: './tasks.component.html',\n  styleUrls: ['./tasks.component.css']\n})], TasksComponent);\nexport { TasksComponent };","map":null,"metadata":{},"sourceType":"module"}